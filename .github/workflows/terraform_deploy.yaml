# .github/workflows/deploy.yml
name: Terraform EC2 Deployment

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output

      - name: Get Terraform outputs for IPs and hostnames
        id: tf_outputs
        run: |
          echo "public_ips=$(terraform output -json instance_public_ips)" >> "$GITHUB_OUTPUT"
          echo "hostnames=$(terraform output -json instance_hostnames)" >> "$GITHUB_OUTPUT"

      # - name: Format REMOTE_IPS for next jobs
      #   id: format_remotes
      #   run: |
      #     ips=$(echo '${{ steps.tf_outputs.outputs.public_ips }}' | jq -r '.[]')
      #     hostnames=$(echo '${{ steps.tf_outputs.outputs.hostnames }}' | jq -r '.[]')
      #     n=$(echo "$ips" | wc -l)
      #     out_arr=()
      #     for i in $(seq 1 $n); do
      #       ip=$(echo "$ips" | sed -n "${i}p")
      #       hn=$(echo "$hostnames" | sed -n "${i}p")
      #       out_arr+=("${ip}:${hn}")
      #     done
      #     remote_ips=$(IFS=,; echo "${out_arr[*]}")
      #     echo "remote_ips=$remote_ips" >> "$GITHUB_OUTPUT"

      - name: Format REMOTE_IPS for next jobs
        id: format_remotes
        run: |
          ips=$(echo '${{ steps.tf_outputs.outputs.public_ips }}' | jq -r '.[]')
          hosts=$(echo '${{ steps.tf_outputs.outputs.hostnames }}' | jq -r '.[]')
          
          # Initialize output array
          out_arr=()
          
          # Get number of instances (assume equal lengths)
          num=$(echo "$ips" | wc -l)
          
          # Loop to pair each ip and hostname
          for i in $(seq 1 $num); do
            ip=$(echo "$ips" | sed -n "${i}p")
            hn=$(echo "$hosts" | sed -n "${i}p")
            out_arr+=("${ip}:${hn}")
          done
          
          # Join array elements with commas
          remote_ips=$(IFS=, ; echo "${out_arr[*]}")
          
          echo "Formatted REMOTE_IPS: $remote_ips"
          
          # Set output variable for downstream jobs
          echo "remote_ips=$remote_ips" >> $GITHUB_OUTPUT          

  add-host:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - run: echo "${{ needs.terraform.outputs.remote_ips }}"



  # add-host:
  #   runs-on: ubuntu-latest
  #   needs: terraform
  #   env:
  #     REMOTE_IPS: ${{ needs.terraform.outputs.remote_ips }}
  #     SCRIPT_LOCAL_PYTHON: zabbix_host_add.py
  #   steps:
  #     - name: Checkout repo (fetch python script)
  #       uses: actions/checkout@v3

  #     - name: Add host via API Python script for each pair
  #       run: |
  #         IFS=',' read -ra HOST_PAIRS <<< "$REMOTE_IPS"
  #         for PAIR in "${HOST_PAIRS[@]}"; do
  #           REMOTE_IP="${PAIR%%:*}"
  #           REMOTE_HOSTNAME="${PAIR#*:}"
  #           echo "Adding host $REMOTE_HOSTNAME with IP $REMOTE_IP..."
  #           python3 "$SCRIPT_LOCAL_PYTHON" "$REMOTE_IP" "$REMOTE_HOSTNAME"
  #         done

  # add-agent:
  #   runs-on: ubuntu-latest
  #   needs: terraform
  #   env:
  #     REMOTE_IPS: ${{ needs.terraform.outputs.remote_ips }}
  #     PEM_FILE: zbx_srv1.pem
  #     REMOTE_USER: ubuntu
  #     SCRIPT_LOCAL: zabbix_agent_add.sh
  #     SCRIPT_REMOTE: /home/ubuntu/zabbix_agent_add.sh
  #   steps:
  #     - name: Checkout repo (fetch PEM and scripts)
  #       uses: actions/checkout@v3

  #     - name: Secure PEM file
  #       run: chmod 600 zbx_srv1.pem

  #     - name: Run commands and deploy agent script on EC2
  #       run: |
  #         IFS=',' read -ra HOST_PAIRS <<< "$REMOTE_IPS"
  #         for PAIR in "${HOST_PAIRS[@]}"; do
  #           REMOTE_IP="${PAIR%%:*}"
  #           REMOTE_HOSTNAME="${PAIR#*:}"
  #           echo "--- $REMOTE_IP ($REMOTE_HOSTNAME): OS Version ---"
  #           ssh -o StrictHostKeyChecking=no -i "$PEM_FILE" "$REMOTE_USER@$REMOTE_IP" "cat /etc/os-release"
  #           echo "ðŸ“¦ Copying $SCRIPT_LOCAL to $REMOTE_USER@$REMOTE_IP ..."
  #           scp -o StrictHostKeyChecking=no -i "$PEM_FILE" "$SCRIPT_LOCAL" "$REMOTE_USER@$REMOTE_IP:$SCRIPT_REMOTE"
  #           echo "ðŸš€ Executing agent script on $REMOTE_USER@$REMOTE_IP ..."
  #           ssh -o StrictHostKeyChecking=no -i "$PEM_FILE" "$REMOTE_USER@$REMOTE_IP" "bash $SCRIPT_REMOTE"
  #           echo "Finished agent steps for $REMOTE_HOSTNAME ($REMOTE_IP)"
  #         done